#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
import logging
from time import time
import tomllib
import argparse, textwrap
from pathlib import Path
from json import dumps as to_json
from sys import stderr
from collections import OrderedDict
from lms import Server, __version__
from re import match
from argparse import ArgumentParser

_LOGGER = logging.getLogger(__name__)

with open(Path.home() / ".config" / "niche-audio" / "config.toml", mode="rb") as fp:
    settings = tomllib.load(fp)

SERVER = settings['general']['server']
LOGFMT = "%(asctime)s %(levelname)5s (%(threadName)s) [%(name)s] %(message)s"
DATEFMT = "%y-%m-%d %H:%M.%S"
PATH_ON_HOST = "/data/music/music_data"
PATH_IN_DOCKER = "/music"
PLAYER = settings['general']['player']

parser = ArgumentParser(description="Interact with Logitech Media Server",
        formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("-v", "--verbose", action='count', default=0,
                    help="increase output verbosity")
parser.add_argument("-c", "--cmd", dest="cmd", default="status",
        help=textwrap.dedent('''\
                status : show players and their status
                play   : without argument start player
                play <files> : play files or urls
                add <files>  : add files to end of playlist
                insert <files>: play files next
                pause  : pause the player
                prev   : previous track
                next   : next track
                shuffle: shuffle tracks
                unshuffle    : unshuffle tracks
                toggle_shuffle : toggle shuffle state
                sleep  : sleep in 30min
                random : play random album
                show   : show test string'''))
parser.add_argument("-s", "--server", dest="server", default=SERVER)
parser.add_argument("-p", "--player", dest="player", default=PLAYER)
parser.add_argument("-d", "--dir", dest="folder")
parser.add_argument("tracks", nargs="*")
args = parser.parse_args()

print(args)

if args.verbose:
    print(f"file: {args.tracks}  cmd: {args.cmd}")
    print(f"player: {args.player} server: {args.server}")

def timeFmt(secs):
    if not secs:
        return ''
    h, r = divmod(secs, 3600)
    m, secs = divmod(r, 60)
    return '%s%02d.%02d' % ('' if not h else '%02d:' % h, m, secs)

def parse_track(track):

    if track.startswith(PATH_ON_HOST):
        print('is file')
        return  f"file://{track.replace(PATH_ON_HOST,PATH_IN_DOCKER)}"
    elif track.startswith('http'):
        print('is_url')
        return track
    else:
        print("whats going on?")

def main():
    """Command line interface."""
    log_level = [logging.ERROR, logging.INFO, logging.DEBUG][args.verbose]

    try:
        import coloredlogs
        coloredlogs.install(level=log_level,
                            stream=stderr,
                            datefmt=DATEFMT,
                            fmt=LOGFMT)
    except ImportError:
        _LOGGER.debug("no colored logs. pip install coloredlogs?")
        logging.basicConfig(level=log_level,
                            stream=stderr,
                            datefmt=DATEFMT,
                            format=LOGFMT)

    server = Server(args.server)
    server.update()

    player_id = args.player
    player = (next((
        player for player in server.players
        if player_id.lower() in [
                player.player_id,
                player.name.lower(),
                player.ip]), None)
              if player_id else None)

    if args.cmd == 'status':
        print(f'{server._host}:{server._port} ({server.version})')
        for player in server.players:
            if player.is_playing:
                status = 'playing'
            elif player.is_paused:
                status = 'paused'
            elif player.is_stopped:
                status = 'stopped'
            else:
                status = '?'
            print(f'- {player.name:10} {player.model:16} '
                  f'{player.ip:15} ðŸ“¶{player.wifi_signal_strength:>4}% '
                  f'{status:7} '
                  f'{(player.artist or "")[:10]:10} {(player.title or "")[:10]:10} '
                  f'{round(player.position_pct):3}% '
                  f'{timeFmt(player.position) or "     "}/'
                  f'{timeFmt(player.duration) or "     "} ')

    #    url='https://open.spotify.com/track/4uLU6hMCjMI75M1A2tKUQC'
    #    server.players[0].query('playlist', 'play', url)
    elif player:
        if args.tracks:
            tracks = []
            for track in args.tracks:
                print(f"track: {track}")
                url = parse_track(track)
                tracks.append(url)
            print(tracks)
            if args.cmd == 'play':
                if len(tracks) > 1:
                    player.enqueue_uri(tracks)
                    player.play()
                else:
                    player.play_uri(tracks)
            elif args.cmd == 'add':
                player.enqueue_uri(tracks)
            elif args.cmd == 'insert':
                player.query('playlist', 'insert', tracks)
        elif args.cmd == 'play':
            player.play()
        elif args.cmd == 'pause':
            player.pause()
        elif args.cmd == 'next':
            player.next()
        elif args.cmd == 'prev':
            player.previous()
        elif args.cmd == 'shuffle':
            player.query('playlist', 'shuffle', 1)
        elif args.cmd == 'unshuffle':
            player.query('playlist', 'shuffle', 0)
        elif args.cmd == 'toggle_shuffle':
            player.query('playlist', 'shuffle')
        elif args.cmd == 'sleep':
            player.query('sleep', '1800')
        elif args.cmd == 'random':
            player.query('randomplay', 'albums')
        elif args.cmd == 'show':
            player.query('show','line1:TestShow', 'duration:2')

        # playlist loadalbum
        # playlist addalbum <genre> <artist> <album>
        #elif args['volume']:
        #    if args['<vol>']:
        #        player.set_volume(args['<vol>'])
        #    elif args['up']:
        #        player.volume_up()
        #    elif args['down']:
        #        player.volume_down()
    else:
        exit('?')


if __name__ == '__main__':
   main()
