set incsearch true
set shell "bash"
set ifs "\n"
set previewer l-mime-viewer
set drawbox true
set mouse true
set user_player ""
setlocal ~/ hidden
setlocal /data/music/music_data/uncut/radioEins/ reverse
set cursorpreviewfmt "\033[7;90m"
%test $LF_LEVEL -eq 1 || >&2 printf "Warning: You're in a nested lf instance!"
#map i $less $f
map <enter> shell-wait
map x !l-mime-run $f
map X !$f
map a
map ad :push %mkdir<space>
cmd touch %{{
    IFS=" "
    file="$*"
    touch -- "$file"
    file="$(printf '%s' "$file" | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id :select \"$file\"; \$\$EDITOR \"$file\""
}}
map af :touch
cmd chmodx &{{
	chmod u+x $fx
	lf -remote "send $id reload"
}}
cmap <right> :cmd-enter; edit
cmd edit !l-mime-edit $f

cmd follow_link %{{
	lf -remote "send ${id} select \"$(readlink $f)\""
}}

map <c-enter> follow_link
# y for copy) and P to paste symlink
# d (select for cut) and P to paste hard link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echoerr no files to link"
        exit
    fi
    case "$mode" in
        # 'copy' mode indicates a symlink
        copy) ln -sr -t . -- "$@";;
        # while 'move' mode indicates a hard link
        move)
            ln -t . -- "$@"
            lf -remote "send clear"
            ;;
    esac
}}

map al :link
map <c-p> :link
#put in bg
#map <c-z> $ kill -STOP $PPID
map <a-h> ${{
        clear
        cmd=$(
            lf -remote "query $id history" |
            awk -F'\t' 'NR > 1 { print $NF}' |
            sort -u |
            fzf --reverse --prompt='Execute command: '
        )
        lf -remote "send $id $cmd"
    }}
# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>
map c copy
map E $ledit $f

map P # lms Player commands


map Pa !lmscommander -v $lf_user_player -c add $fx
map Pi !lmscommander -v $lf_user_player -c insert "$fx"
map Pn $lms-play.py -v $lf_user_player -c play_now $fx
#map Pp !{{
#	echo "opt: $lf_user_player"
#        lms-play.py -v "$lf_user_player" -c play $fx
#}}
map Pp !echo "player: >$lf_user_player<i $fx";lmscommander -v $lf_user_player -c play "$fx"
map Pw !echo "$lf_user_player"; whatsplaying.py -v "$lf_user_player"
map PA $lms-play.py -v "$lf_user_player" -c add -d $PWD
map PI $lms-play.py -v "$lf_user_player" -c insert -d $PWD
map PN $lms-play.py -v "$lf_user_player" -c play_now -d $PWD
map PP $lms-play.py -v "$lf_user_player" -c load -d $PWD


cmd setplayer ${{
        set -f
        echo "oldplayer: $PLAYEROPT"
        PLAYEROPT="-p $(~/.local/bin/lmsgetplayers.py | fzf)"
        echo "newplayer: $PLAYEROPT"
        export PLAYEROPT="$PLAYEROPT"
}}

cmd choose_player !{{
       set -f
       PLAYER_OPT="--player=$(~/.local/bin/lmsgetplayers.py|fzf)"
       lf -remote "send $id set user_player \"$PLAYER_OPT\""
}}
map Ps choose_player

map b # organise music with beets
#map ba !beet edit -a --all $PWD
map bd !beet remove -d "$f"
#map bn !beet modify album=no-album $f
map bt !eyeD3 -P yaml "$f" | bat -p
map bm manage_tags
map bu !beet update $PWD
map bi !beet info "$f" | bat -p
map bj !beet info -a "$f"
map be !/data/music/music_var/bin/beet-edit "$f"
map bs push :import_singleton
map ba push :import_album
map bo push :set_subgroup

cmd list_artist ${{
	RES_JSON=$(eyeD3 -P json "$f")
        ARTIST=$(echo $RES_JSON | jq '.artist')
        ARTIST="${ARTIST//\"/}"
	beet list artist:$ARTIST | bat -p
	read -n1 -p "continue..."
}}

cmd manage_tags ${{
        echo "$f"
	RES_JSON=$(eyeD3 -P json "$f")
        GENRE=$(echo $RES_JSON | jq '.genre')
        GENRE="${GENRE//\"/}"
        TITLE=$(echo $RES_JSON | jq '.title')
        TITLE="${TITLE//\"/}"
        ALBUM=$(echo $RES_JSON | jq '.album')
        ALBUM="${ALBUM//\"/}"
        ARTIST=$(echo $RES_JSON | jq '.artist')
        ARTIST="${ARTIST//\"/}"
        read -p "title: $TITLE > " ans
        if [[ $ans ]]
        then
           TITLE=$ans
        fi
        read -p "album: $ALBUM > " ans
        if [[ $ans ]]
        then
           ALBUM=$ans
        fi
        read -p "artist: $ARTIST > " ans
        if [[ $ans ]]
        then
           ARTIST=$ans
        fi
        read -p "genre: $GENRE > " ans
        if [[ $ans ]]
        then
           GENRE=$ans
        fi
	#echo "eyeD3 --to-v2.4  --non-std-genres -a '$ARTIST' -A '$ALBUM' -t '$TITLE' -G 'GENRE' $f" 
        eyeD3 --to-v2.4  --non-std-genres -a "$ARTIST" -A "$ALBUM" -t "$TITLE" -G "GENRE" "$f"
        eyeD3 -P yaml "$f" | bat
	read -n1 -p "continue.."
}}

cmd import_singleton ${{
        #GROUPING=$1
        read -p "grouping:$GROUPING " ans
        #if [[ $ans ]]
        #then
           GROUPING=$ans
        #else
        #   exit(1)
        #fi
	beet import -As "$f" --set grouping=$GROUPING &
        read -n1 -p "continue..."
}}

cmd import_album ${{
        #ALBUM_GROUPING=$1
        read -p "album_grouping $ALBUM_GROUPING:" ans
        #if [[ $ans ]]
        #then
	#   if [[ $ans =~ ^(quit|q) ]]
        #   then
	#      exit(0)
        #   fi
           ALBUM_GROUPING=$ans
        #fi
	beet import -A "$f" --set album_grouping=$ALBUM_GROUPING
        read -n1 -p "continue..."
}}

cmd set_subgroup ${{
	SUBGROUP=$1
	read -p "Subggroup: $SUBGROUP " ans
	#beet modify subgroup=$ans $1
        echo $SUBGROUP
        read -n1 -p "continue.."
}}

map Ba album_import
map BA !beet-music edit -a $f #!echo "$fx" | xargs beet-music edit -a 
map Bs single_import
map BS !beet-music edit $f
map Bf list_artist
map Bn !echo "$fx" | xargs -n 1 beet-music modify -a -y style=no-album

cmd album_import ${{
	read -p "album_grouping? " AGROUP
	read -p "subgroup? " SGROUP
        read -n 1 -p "Compilation? [y|N]" ans
        read -n 1 -p "No Album? [y|N]" noalbum
        CMD="echo \"$fx\" | xargs -n 1 beet-music import -A --set album_grouping=\"$AGROUP\""
	if [[ $AGROUP ]]
	then
	  [[ -n $SGROUP ]] && CMD="$CMD --set subgroup=\"$SGROUP\""
          [[ $ans = y ]] && CMD="$CMD --set comp=true"
          [[ $noalbum = y ]] && CMD="$CMD --set style=no-album"
          eval $CMD
	else
	  echo "$fx" | xargs -n1  -I % printf "% \n\n" 
	fi
	read -n1 -p "continue..."
}}

cmd single_import ${{
	read -p "grouping? " GROUP
	read -p "subgroup? " SGROUP
	if [[ $GROUP ]]
	then
	  if [[ $SGROUP ]]
	  then
	    beet-music import -As --set grouping=$GROUP --set subgroup=$SGROUP "$f"
	  else
	    beet-music import -As --set grouping=$GROUP "$f"
	  fi
	else
	  echo "$fx"
	fi
	read -n1 -p "continue..."
}}

cmd newfile %zellij edit $1 -f; :reload

map Z # interact with zellij
#map Zt zrf htop
map Zt $zellij run --name "htop" --floating -- bash -ic "htop";
map Ze $zellij edit --floating --width 90% --height 70% "$f"
map Zf push :newfile
map Zd newfold

cmd newfold ${{
    set -f
    read newd
    printf "Directory name: "
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    read -n1 -p "delete?[y/N]" ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <backspace2> delete

cmd edit-lf-config ${{
    $EDITOR /etc/lf/lfrc
    lf -remote "send $id source /etc/lf/lfrc"
}}

cmd edit-lf-local-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source /etc/lf/lfrc"
}}

cmd edit-nvim-config ${{
    $EDITOR ~/.config/nvim/init.vim
    }}

cmd edit-vim-config ${{
    $EDITOR ~/.vimrc 
	}}

cmd edit-mailcap-config ${{
    $EDITOR ~/.mailcap 
	}}

map C
map Cl edit-lf-config
map CL edit-lf-local-config
map Cm edit-mailcap-config
map Cn edit-nvim-config
map Cv edit-vim-config


cmd bookmark_jump ${{
    res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    lf -remote "send $id cd \"$res\""
}}

map gj bookmark_jump

cmd bookmark_create ${{
    read -p "bookmark: " ans
    echo $PWD > $LF_BOOKMARK_PATH/$ans
}}

map gb bookmark_create

cmd follow-link %{{
  lf -remote "send $id select \"$(readlink -- "$f" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

map gL follow-link


cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

cmd paste-override ${{
        set -f
        mode=$(head -1 ~/.local/share/lf/files)
        list=$(sed 1d ~/.local/share/lf/files)
        set -- _ $list; shift
        [ $# -gt 0 ] || exit
        case $mode in
                copy)
                        rsync -r "$@" ./
                        ;;
                move)
                        rsync -r --remove-source-files "$@" ./
                        ;;
        esac
        lf -remote 'save\nmove\n'
        lf -remote "send $id load"
        lf -remote "send $id echo \"\033[0;32mpasted $# file(s)\033[0m\""
}}

map p
map pp paste
map po paste-overwrite
