#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
import logging
import tomllib
import argparse, textwrap
import os
from lmscommander import LMServer,LMPlayer
from pathlib import Path
from argparse import ArgumentParser

      
                
def main():
    with open(os.path.join(Path.home(),".config","niche-audio","config.toml"), mode="rb") as fp:
        settings = tomllib.load(fp)
    server_id = settings.get('general',{}).get('server')
    player_id = settings['general']['player']
    parser = ArgumentParser(description="Interact with Logitech Media Server",
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('cmd', help=textwrap.dedent('''\
                status : show players and their status
                info   : show player info
                play   : without argument start player
                play <tracks> : play files or urls
                add <tracks>  : add files to end of playlist
                insert <tracks>: play files next
                pause  : pause the player
                prev   : previous track
                next   : next track
                shuffle: shuffle tracks
                unshuffle    : unshuffle tracks
                toggle_shuffle : toggle shuffle state
                sleep  : set/add sleeptime <min> default 30min
                random : play random album
                show   : show test string'''))
    parser.add_argument("-v", "--verbose", action='count', default=0,
                    help="increase output verbosity")
    parser.add_argument("-s", "--server", dest="server", default=server_id)
    parser.add_argument("-p", "--player", dest="player", default=player_id)
    parser.add_argument("tracks", nargs="*", help='files or url')
    args = parser.parse_args()
    server = LMServer(host=server_id)
    server.update()
    my_player = LMPlayer(server.get_player(player_id))
    if args.verbose:
        print(my_player)
        print(args.cmd)
        print(args.tracks)

    if args.cmd == 'info':
        print(my_player)
    else:
        getattr(my_player, args.cmd)(args.tracks)

if __name__ == '__main__':
   main()
